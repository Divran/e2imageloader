@name imageloader
@inputs Digi:wirelink Digis:array
@persist [URL Image ImageData WantedUrl Prefix]:string Step OldPercent
@persist MaxRes:vector2 AutoScaleToNumberOfScreens NumScreenSqrt
@persist KeepAspectRatio DetectScreenRatio BackgroundColor:vector
@persist LoadShare:array ImageSize:vector2

@persist LoadShare_Start LoadShare_Stop SendLoadShare_Index
@persist LoadShare_Output_Start LoadShare_Output_Stop LoadShare_Step
@persist LinkedDigis:array

@persist G:gtable

if (first()|dupefinished()|~Digi|~Digis) {
    #Source https://github.com/Divran/e2imageloader
    #########################
    #Options here
    
    #Enter image here
    #Image = "http://i.imgur.com/xn4cYl4.png?fb"
    Image = "http://i.imgur.com/xn4cYl4.png"
    #Or leave it empty to use chat commands
    
    #[  To use chat commands, aim at the digital screen
        that you want to change, then type the prefix
        followed immediately by an URL
        example:
          >http://i.imgur.com/xn4cYl4.png?fb ]#
    
    #Set max res here, image will be downscaled
    MaxRes = vec2(128,128)
    
    # If this is enabled, will ignore the MaxRes setting above and will instead
    # automatically scale the max res to the number of screens
    # If only 1 screen is connected, it will use the MaxRes value above
    AutoScaleToNumberOfScreens = 1
    
    #[  Background color.
        Only works if KeepAspectRatio is enabled
        Or if the image has transparency ]#
    BackgroundColor = vec(255)
    
    #[  Set to 1 to keep aspect ratio by placing a background
        (change color above) around the image, if it is not square
        If 0, and the image is not square, it will be stretched to fit
        the whole digi screen ]#
    KeepAspectRatio = 1
    
    #[  Set to 1 to attempt to detect the ratio of the digital screen.
        If you are using a digital screen that isn't square shaped
        this could be useful. However, it probably won't work
        for every screen, since some props are rotated differently.
        This option only works if KeepAspectRatio is enabled. ]#
    DetectScreenRatio = 1
    #[  If your screen has a different rotation, you can try
        adjusting this function.]#
    function vector2 entity:getScreenSize() {
        local Size = This:boxSize() #Get prop size
        Size = Size - vec(2) #Remove a bit around the edges
        
        #You can add more models here
        local FlippedModels = table(
            "models/props/cs_office/tv_plasma.mdl"=1,
            "models/kobilica/wiremonitorbig.mdl"=1,
            "models/kobilica/wiremonitorrt.mdl"=1,
            "models/kobilica/wiremonitorrtbig.mdl"=1,
            "models/kobilica/wiremonitorsmall.mdl"=1,
            "models/props_phx/construct/metal_tubex2.mdl"=1
        )
        if (FlippedModels[This:model(),number]) {
            return vec2(Size:y(),Size:z())
        } else {
            #Every other model
            return vec2(Size:x(),Size:y())
        }
    }
    
    #Change this to your server php script address
    URL = "http://localhost/a/imageloader.php"
    
    #Chat command prefix
    Prefix = ">"
    
    ###########################
    #No more options beyond this point
    
    if (!->Digi & !->Digis) {
        #ifdef entity:wirelink()
            local E = entity():isWeldedTo()
            if (E:type() == "gmod_wire_digitalscreen") {
                local DigiVar = entity():isWeldedTo():wirelink()
                LinkedDigis = array(DigiVar)
                NumScreenSqrt = 1
            } else {
                print("Wire up the digi screen first!")
                exit()
            }
        #else
            print("Wire up the digi screen first!")
            exit()
        #endif
    } elseif (->Digi) {
        LinkedDigis = array(Digi)
        NumScreenSqrt = 1
    } elseif (->Digis) {
        LinkedDigis = array()
        for(I=1,Digis:count()) {
            LinkedDigis[I,wirelink] = Digis[I,entity]:wirelink()
        }
        
        NumScreenSqrt = sqrt(LinkedDigis:count())
        if (AutoScaleToNumberOfScreens) {
            MaxRes = vec2(512 * NumScreenSqrt)
        }
    }
    
    function number validImage(STR:string) {
        return Image != "" & Image:findRE("https?://.*%..+%..+") != 0
    }
    
    if (validImage(Image)) {
        timer("start",1)
    }
    
    function setRes(Width,Height) {
        local Num = LinkedDigis:count()
        
        if (Num == 1) {
            LinkedDigis[1,wirelink][1048573] = Width
            LinkedDigis[1,wirelink][1048572] = Height
        } else {
            # Do nothing for now
        
            #[
            local TotalRes = 512 * sqrt(Num)
            Width = min(Width,TotalRes)
            Height = min(Height,TotalRes)
            
            for(I=1,LinkedDigis:count()) {
                LinkedDigis[I,wirelink][1048573] = Width
                LinkedDigis[I,wirelink][1048572] = Height
            }
            ]#
        }
    }
    
    function setDefaultOptions() {
        for(I=1,LinkedDigis:count()) {
            local DigiVar = LinkedDigis[I,wirelink]
            DigiVar[1048573] = 512 #width
            DigiVar[1048572] = 512 #height
            DigiVar[1048569] = 3 #RRRGGGBBB
            DigiVar[1048574] = 1 #Clear screen
            DigiVar[1048574] = 0
        }
    }
        
    setDefaultOptions()
    
    runOnHTTP(1)
    runOnChat(1)
    
    G = gTable("imageloader",0)
    dsSetScope(0)
    dsJoinGroup("imageloader-main")
    LoadShare = dsProbe("imageloader",0)
    print("Found " + LoadShare:count() + " loadsharing E2s!")
} elseif (dsClk("register")) {
    LoadShare = dsProbe("imageloader",0)
    print("Found " + LoadShare:count() + " loadsharing E2s!")
} elseif (chatClk(owner())) {
    if (lastSaid():sub(1,Prefix:length()) == Prefix) {
        Image = lastSaid():sub(Prefix:length()+1)
        if (validImage(Image)) {
            local Aim = owner():aimEntity()
            local Found = owner():aimEntity() == entity()
            if (!Found) {
                for(I=1,LinkedDigis:count()) {
                    if (LinkedDigis[I,wirelink]:entity() == Aim) {
                        Found = 1
                        break
                    }
                }
            }
            
            if (Found) {
                timer("start",1)
            }
        } else {
            print("Invalid image specified")
        }
        hideChat(1)
    }
} elseif (httpClk() & httpRequestUrl() == WantedUrl) {
    ImageData = httpData()
    
    local ImageSizeEnd = ImageData:find(";",0)
    local ImageSizeStr = ImageData:sub(1,ImageSizeEnd-1)
    ImageData = ImageData:sub(ImageSizeEnd+1)
    local ImageSizeExp = ImageSizeStr:explode("x")
    local W = ImageSizeExp[1,string]:toNumber()
    local H = ImageSizeExp[2,string]:toNumber()
    ImageSize = vec2(W,H)
    setRes(W,H)
    
    if (LoadShare:count() > 0) {
        timer("send_loadshare",1)
        SendLoadShare_Index = 0
        LoadShare_Step = floor(ImageData:length() / (LoadShare:count()+1))
        LoadShare_Output_Start = 0
        LoadShare_Output_Stop = LoadShare_Step
        
        LoadShare_Start = 0
        LoadShare_Stop = LoadShare_Step
    } else {
        LoadShare_Start = 0
        LoadShare_Stop = ImageData:length()
        timer("step",1)
    }
    
    G["stop",number] = 0
    
    print("Loading image of size " + W + "x" + H)
} elseif (clk("start") | clk("check again")) {
    stoptimer("step")
    
    #we use a gtable here instead of datasignals
    #because datasignals cause a lot of ops
    #which crashes the e2 on servers with low ops caps
    G["stop",number] = 1
    #dsSend("stop","imageloader","derp")

    #1048573 = set width
    #1048572 = set height
    #1048574 = clear screen
    #1048569 = color mode
    #<1048500 = RGB Data
    
    if (!httpCanRequest()) {
        timer("check again",1000)
        exit()
    }

    setDefaultOptions()
    
    local ScreenRatio = 1
    if (DetectScreenRatio) {
        local Size = LinkedDigis[1,wirelink]:entity():getScreenSize()
        ScreenRatio = round(Size:x() / Size:y(),3)
    }
    
    local RND = randint(1,1000)
    
    ImageData = ""
    Step = 0
    OldPercent = 0
    WantedUrl = URL+
                "?image="+httpUrlEncode(Image)+
                "&maxres="+MaxRes:x()+"x"+MaxRes:y()+
                "&keepaspect="+KeepAspectRatio+
                "&screenratio="+ScreenRatio+
                "&bgcolor="+httpUrlEncode(format("%d,%d,%d",
                                            BackgroundColor:x(),
                                            BackgroundColor:y(),
                                            BackgroundColor:z()
                                        ))+
                "&rnd=" + RND
    
    print(WantedUrl)
    print("Loading image '" + Image + "'")
    httpRequest(WantedUrl)
} elseif (clk("send_loadshare")) {
    if (!perf()) {
        timer("send_loadshare",100)
        exit()
    }
    SendLoadShare_Index++

    local E = LoadShare[SendLoadShare_Index,entity]
    LoadShare_Output_Start = LoadShare_Output_Stop + 1
    LoadShare_Output_Stop = LoadShare_Output_Stop + LoadShare_Step
    dsSendDirect("load",E,table(
        "wirelink" = LinkedDigis,
        "imagedata" = ImageData,
        "imagesize" = ImageSize,
        "maxres" = MaxRes,
        "start" = LoadShare_Output_Start,
        "stop" = LoadShare_Output_Stop
    ))
    
    if (SendLoadShare_Index < LoadShare:count()) {
        timer("send_loadshare",1)
    } else {
        timer("step",10)
    }
} elseif (clk("step")) {
    while(perf()) {
        local Color = ImageData:sub(Step*9+1,Step*9+9):toNumber()
        if (Color != 0) {
            local X = Step % ImageSize:x()
            local Y = floor(Step / ImageSize:y())
            
            local DigiX = floor(X / 512)
            local DigiY = floor(Y / 512) * NumScreenSqrt
            
            LinkedDigis[DigiX+DigiY+1,wirelink][X % 512 + 512 * (Y % 512)] = Color
        }
        Step++
    }
    
    if (Step*9+9 < LoadShare_Stop) {
        #Only print status if percent difference is greater than 25%
        #And only if the image is larger than approx 256x256
        if (ImageData:length() >= 589824) {
            local Percent = floor((Step*9+9)/ImageData:length()*100)
            if (Percent - OldPercent >= 25) {
                print(Percent + "% done")
                OldPercent = Percent
            }
        }
        timer("step",10)
    } else {
        print("100% done")
    }
}
